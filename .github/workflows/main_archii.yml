name: Azure Continuous Delivery

on:
  workflow_dispatch:
    inputs:
      IMAGE_REPOSITORY:
        description: 'Repository of the image (same as declared in App Service creation)'
        required: true
        default: 'api-vise'
      IMAGE_TAG:
        description: 'Tag of the image'
        required: true
        default: 'latest'
      AZURE_WEBAPP_NAME:
        description: 'Nombre del App Service creado en Azure'
        required: true
      PORT:
        description: 'Port of the application'
        default: '443'
        required: true

env:
  ACR_HOST: ${{ secrets.ACR_NAME_VANE }}.azurecr.io
  IMAGE_FULL: ${{ secrets.ACR_NAME_VANE }}.azurecr.io/${{ github.event.inputs.IMAGE_REPOSITORY }}:${{ github.event.inputs.IMAGE_TAG }}

jobs:
  build-and-push-image:
    name: Build and Push to ACR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Docker Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_NAME_VANE }}.azurecr.io
          username: ${{ secrets.ACR_NAME_VANE }}
          password: ${{ secrets.ACR_PASSWORD_VANE }}

      - name: Build and Push to ACR
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ env.IMAGE_FULL }}
          file: Dockerfile

  deploy:
    name: Deploy remote container to Azure
    runs-on: ubuntu-latest
    needs: build-and-push-image
    steps:
      - name: Deploy to Azure Web App for Container
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ github.event.inputs.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_VANESSA }}
          images: ${{ env.IMAGE_FULL }}

  test-deploy:
    name: Test deployed service
    runs-on: ubuntu-latest
    needs: [build-and-push-image, deploy]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup hurl (API testing tool)
        uses: gacts/install-hurl@v1

      - name: Test API with Hurl
        run: |
          # Ajusta session.hurl si no está en la raíz
          if [ -f session.hurl ]; then
            hurl --variable host="https://${{ github.event.inputs.AZURE_WEBAPP_NAME }}.azurewebsites.net:${{ github.event.inputs.PORT }}" --connect-timeout 20s --error-format long --verbose --test session.hurl
          else
            echo "session.hurl not found in repo root — skipping tests"
          fi

  debug:
    name: Optional debug (safe to run)
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: ${{ always() }}
    steps:
      - name: Checkout repository for debug
        uses: actions/checkout@v4

      - name: Debug list files (optional)
        run: |
          echo "PWD: $(pwd)"
          echo "Listing root:"
          ls -la
          echo "Listing repo top-level:"
          ls -la .
          echo "Looking for common Dockerfile locations:"
          ls -la Dockerfile || true
          ls -la vise-api || true
          ls -la vise-api/vise-api || true

          if [ -f "Dockerfile" ]; then
            echo "Dockerfile found at ./Dockerfile"
            sed -n '1,40p' Dockerfile || true
          elif [ -f "vise-api/Dockerfile" ]; then
            echo "Dockerfile found at vise-api/Dockerfile"
            sed -n '1,40p' vise-api/Dockerfile || true
          elif [ -f "vise-api/vise-api/Dockerfile" ]; then
            echo "Dockerfile found at vise-api/vise-api/Dockerfile"
            sed -n '1,40p' vise-api/vise-api/Dockerfile || true
          else
            echo "Dockerfile NOT FOUND in common locations"
          fi
